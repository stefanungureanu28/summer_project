#include <bits/stdc++.h>
#include <windows.h>
using namespace std;

#define Debug(x) cout<<x;

struct State{
    string  color;
    int     value,
            card_points,
            state;  /// 0 (available), 1 (used), -1 (discard)

};

 struct State Matrix[100][100];

 struct used_in_combination{

 bool used;
 int value;
 string color;

 };

 struct used_in_combination used_in_combination_Matrix[101][101];

 int Matrice_val_initiala[100][100];

int Available_Combinations_size = 0, available_line = 0;

struct Combinations{
    string color;
    int value;
    int scor;
};

struct Combinations Available_Combinations[1000][4];


struct suite{
    int scor;
    string color;

};

struct suite best_suite[2];


 /// <init data>




int global_scor = 0; ///                         GLOBAL SCOR








/// <evaluate_Table_Points>
    int table_points[10] = {0},
    counter = 0,
    sum_points = 0;
    string table_colors[10];
 ///</evaluate_Table_Points>

 ///</init data>

/// <Our functions>
void set_Matrix(void);
void cout_Matrix(string);
int scor_cards(int, int, int, string, string, string);
bool check_available_positions(int, int, int, int);
void Calculate_Available_Points_For(int, int);
int get_column(string);
void Discard(int, int);
void Input(void);
void evaluate_and_set_Matrix_Points(void);
void WhatToDiscard(void);
void evaluate_Table_Points(bool);
void SimulateGame(void);
bool available_combinations_until_scor_is_reached(int);
bool terta_de_opt(void);
bool terta_de_unu(void);
void best_suite_for_current_input(void);
void Analyze(void);
void transfer_card_points(void);
bool possible_group_or_terta_for_win(void);
///</Our functions>



int main()
{



set_Matrix();

cout_Matrix("value");

/*

//Matrix[15][11].state = -1;
Matrix[17][11].state = -1;
Matrix[16][12].state = -1;
Matrix[15][13].state = -1;
Matrix[14][12].state = -1;
Matrix[13][11].state = -1;
Matrix[12][13].state = - 1;
Matrix[11][12].state = -1;
Matrix[18][13].state = -1;
///Matrix[16][11].state = -1;
*/



evaluate_and_set_Matrix_Points();



cout_Matrix("state");

cout_Matrix("card_points");



cout<<"==============================="<<endl<<endl<<endl;


/**
while(true)
{
    int a;
    string b;
    cin>>a>>b;
    Discard(10+a,get_column(b));

    evaluate_and_set_Matrix_Points();

    cout_Matrix("state");

    cout_Matrix("card_points");
}

*/

///cout<<"scor====== "<<scor_cards(Matrix[16][12].value, Matrix[17][12].value, Matrix[18][11].value, Matrix[16][12].color, Matrix[17][12].color, Matrix[18][11].color)<<endl;

while(true)
{

cout<<"SCOR = "<<global_scor;



Input();

      evaluate_and_set_Matrix_Points();
      evaluate_Table_Points(false);


if(available_combinations_until_scor_is_reached(300-global_scor) == true)
{
    cout<<"============================ YOU WON =============================="<<endl;
    Matrix[Available_Combinations[1][1].value + 10][get_column(Available_Combinations[1][1].color)].card_points = 9999;
    Matrix[Available_Combinations[1][2].value + 10][get_column(Available_Combinations[1][2].color)].card_points = 9999;
    Matrix[Available_Combinations[1][3].value + 10][get_column(Available_Combinations[1][3].color)].card_points = 9999;

    Matrix[Available_Combinations[2][1].value + 10][get_column(Available_Combinations[2][1].color)].card_points = 9999;
    Matrix[Available_Combinations[2][2].value + 10][get_column(Available_Combinations[2][2].color)].card_points = 9999;
    Matrix[Available_Combinations[2][3].value + 10][get_column(Available_Combinations[2][3].color)].card_points = 9999;

}

    cout_Matrix("state");
    cout_Matrix("card_points");

Analyze();

    cout_Matrix("card_points");

evaluate_and_set_Matrix_Points();
evaluate_Table_Points(false);

cout_Matrix("state");

cout_Matrix("card_points");



cout<<endl<<endl;
}



    evaluate_and_set_Matrix_Points();

    cout_Matrix("state");

    cout_Matrix("card_points");


evaluate_Table_Points(false);

cout_Matrix("card_points");


    return 0;
}

void set_Matrix(){

/*for(int i = 1; i<=30; i++)
    for(int j =1; j<=30; j++)
        Matrix[i][j].value = 0, Matrix[i][j].color = "pink", Matrix[i][j].state = -1, Matrix[i][j].card_points = 0;*/


 for(int j = 11; j<=13; j++)
    {
        for(int i = 11; i<=18; i++)
           {
            if(j == 11)
            used_in_combination_Matrix[i][11].color = "yellow", used_in_combination_Matrix[i][11].value = i - 10, used_in_combination_Matrix[i][11].used = false;
            if(j == 12)
            used_in_combination_Matrix[i][12].color = "red", used_in_combination_Matrix[i][12].value = i - 10, used_in_combination_Matrix[i][12].used = false;
            else if(j==13)
            used_in_combination_Matrix[i][13].color = "blue", used_in_combination_Matrix[i][13].value = i - 10 , used_in_combination_Matrix[i][13].used = false;
           }

    }



int j, i;


for(i = 1; i<=30; i++)
    for(j = 1; j<=30; j++)
       Matrice_val_initiala[i][j] = 0;



 for(int j = 11; j<=13; j++)
    {
        for(int i = 11; i<=18; i++)
           {
            if(j == 11)
            Matrix[i][11].color = "yellow", Matrix[i][11].value = i - 10, Matrix[i][11].state = 0, Matrix[i][11].card_points = 0;
            if(j == 12)
            Matrix[i][12].color = "red", Matrix[i][12].value = i - 10, Matrix[i][12].state = 0, Matrix[i][12].card_points = 0;
            else if(j==13)
            Matrix[i][13].color = "blue", Matrix[i][13].value = i - 10, Matrix[i][13].state = 0, Matrix[i][13].card_points = 0;
           }

    }





}

void cout_Matrix(string choice)
{

    if(choice == "value")
    {       cout<<"Matrix by values:"<<endl<<endl;
            for(int i = 11; i<=18; i++){
        for(int j = 11; j<=13; j++)
            cout<<Matrix[i][j].value<<" ";
            cout<<endl;}
    }
    else if (choice == "state")
    {       cout<<"Matricea by state:"<<endl<<endl;
             for(int i = 11; i<=18; i++){
        for(int j = 11; j<=13; j++)
            cout<<Matrix[i][j].state<<" ";
            cout<<endl;}
    }
    else if (choice == "color")
    {   cout<<"Matrix by color:"<<endl<<endl;
         for(int i = 8; i<=18; i++){
        for(int j = 11; j<=13; j++)
            cout<<Matrix[i][j].color<<" ";
            cout<<endl;}
    }
        else if (choice == "card_points")
    {   cout<<"Matrix by card_points:"<<endl<<endl;
         for(int i = 11; i<=18; i++){
        for(int j = 11; j<=13; j++)
            cout<<Matrix[i][j].card_points<<" ";
            cout<<endl;}
    }

    else cout<<"Invalid choice";
     cout<<endl;
      cout<<endl;

}

int scor_cards(int first, int second, int third, string fcolor, string scolor, string tcolor)
{
    if(first >0 and second >0 and third >0 )
        if(first < 9 and second < 9 and third < 9)
            if((fcolor == "blue" or fcolor == "red" or fcolor == "yellow") and (scolor == "blue" or scolor == "red" or scolor == "yellow") and (tcolor == "blue" or tcolor == "red" or tcolor == "yellow"))
    {

        if(Matrix[10+first][get_column(fcolor)].state == -1 or Matrix[10+second][get_column(scolor)].state == -1 or Matrix[10+third][get_column(tcolor)].state == -1)
            return -1;

    /// Sort Low to High
    int list_cards[] = {first, second, third};
    string color_cards[] = {fcolor, scolor, tcolor};

    /// Sorting algorithm
    for(int i = 0; i<2; ++i)
        for(int j = i+1; j<=2; ++j)
            if(list_cards[i] > list_cards[j])
    {
        swap(list_cards[i], list_cards[j]);
        swap(color_cards[i], color_cards[j]);
    }
     first = list_cards[0], second = list_cards[1], third = list_cards[2];
     fcolor = color_cards[0], scolor = color_cards[1], tcolor = color_cards[2];

    /// 1 - 1 - 1 = 20
    if(first == second and second == third){
            return (first+1)*10;

    }

    /// 1 - 2 - 3 same colour = 50
    if(first+1 == second and second+1 == third)
        if(fcolor == scolor and scolor == tcolor)
            return third*10 + 20;

    /// 1 - 2 - 3 different colour
    if(first+1 == second and second+1 == third)
            return first*10;
    }
    return -1;
}





void Calculate_Available_Points_For(int line, int column)
{
    int testing = 2;

    for(int i = line - 2; i < line - 1; i++)
        for(int j = column - testing; j <= column +testing; ++j)
            for(int k = column-testing; k<= column+testing; k++){
                Matrix[line][column].card_points+=(scor_cards(Matrix[line][column].value, Matrix[i][j].value, Matrix[line-1][k].value, Matrix[line][column].color, Matrix[i][j].color, Matrix[line-1][k].color)!= -1)?scor_cards(Matrix[line][column].value, Matrix[i][j].value, Matrix[line-1][k].value, Matrix[line][column].color, Matrix[i][j].color, Matrix[line-1][k].color):0;

               if(scor_cards(Matrix[line][column].value, Matrix[i][j].value, Matrix[line-1][k].value, Matrix[line][column].color, Matrix[i][j].color, Matrix[line-1][k].color)!= -1)
               {
                Available_Combinations_size++;
                available_line++;
                Available_Combinations[available_line][1].value = Matrix[line][column].value; Available_Combinations[available_line][1].color = Matrix[line][column].color;
                Available_Combinations[available_line][2].value = Matrix[i][j].value; Available_Combinations[available_line][2].color = Matrix[i][j].color;
                Available_Combinations[available_line][3].value = Matrix[line-1][k].value; Available_Combinations[available_line][3].color = Matrix[line-1][k].color;
               }
          ///  if(scor_cards(Matrix[line][column].value, Matrix[i][j].value, Matrix[line-1][k].value, Matrix[line][column].color, Matrix[i][j].color, Matrix[line-1][k].color)!= -1)
              ///working  Info[l


                //if(scor_cards(Matrix[line][column].value, Matrix[i][j].value, Matrix[line-1][k].value, Matrix[line][column].color, Matrix[i][j].color, Matrix[line-1][k].color)!= -1 and line == 11 and column == 11)
                 //   cout<<Matrix[line][column].value<<Matrix[line][column].color<<" "<<Matrix[i][j].value<<Matrix[i][j].color<<" "<<Matrix[line-1][k].value<<Matrix[line-1][k].color<<endl;
            }


for(int i = line - 1; i < line; i++)
        for(int j = column - testing; j <= column +testing; ++j)
            for(int k = column-testing; k<= column+testing; k++)
{
            Matrix[line][column].card_points+=(scor_cards(Matrix[line][column].value, Matrix[i][j].value, Matrix[line+1][k].value, Matrix[line][column].color, Matrix[i][j].color, Matrix[line+1][k].color)!= -1)?scor_cards(Matrix[line][column].value, Matrix[i][j].value, Matrix[line+1][k].value, Matrix[line][column].color, Matrix[i][j].color, Matrix[line+1][k].color):0;
                           if(scor_cards(Matrix[line][column].value, Matrix[i][j].value, Matrix[line+1][k].value, Matrix[line][column].color, Matrix[i][j].color, Matrix[line+1][k].color)!= -1)
               {
                Available_Combinations_size++;
                available_line++;
                Available_Combinations[available_line][1].value = Matrix[line][column].value; Available_Combinations[available_line][1].color = Matrix[line][column].color;
                Available_Combinations[available_line][2].value = Matrix[i][j].value; Available_Combinations[available_line][2].color = Matrix[i][j].color;
                Available_Combinations[available_line][3].value = Matrix[line+1][k].value; Available_Combinations[available_line][3].color = Matrix[line+1][k].color;
               }

}


      /// combinatii de 4
      int i = line, j = column;
      if(scor_cards(Matrix[i][j-2].value, Matrix[i][j-1].value, Matrix[i][j].value, Matrix[i][j-2].color, Matrix[i][j-1].color, Matrix[i][j].color)!= -1) /// 4 galben 4 rosu 4 verde
           {
               Matrix[i][j].card_points += scor_cards(Matrix[i][j-2].value, Matrix[i][j-1].value, Matrix[i][j].value, Matrix[i][j-2].color, Matrix[i][j-1].color, Matrix[i][j].color);

                if(scor_cards(Matrix[i][j-2].value, Matrix[i][j-1].value, Matrix[i][j].value, Matrix[i][j-2].color, Matrix[i][j-1].color, Matrix[i][j].color)!= -1)
               {
                Available_Combinations_size++;
                available_line++;
                Available_Combinations[available_line][1].value = Matrix[i][j-2].value; Available_Combinations[available_line][1].color = Matrix[i][j-2].color;
                Available_Combinations[available_line][2].value = Matrix[i][j-1].value; Available_Combinations[available_line][2].color = Matrix[i][j-1].color;
                Available_Combinations[available_line][3].value = Matrix[i][j].value; Available_Combinations[available_line][3].color = Matrix[i][j].color;
               }
           }
         if(scor_cards(Matrix[i][j-1].value, Matrix[i][j].value, Matrix[i][j+1].value, Matrix[i][j-1].color, Matrix[i][j].color, Matrix[i][j+1].color)!= -1) /// 4 rosu 4 verde 4 albastru
          {
              Matrix[i][j].card_points += scor_cards(Matrix[i][j-1].value, Matrix[i][j].value, Matrix[i][j+1].value, Matrix[i][j-1].color, Matrix[i][j].color, Matrix[i][j+1].color);

                if(scor_cards(Matrix[i][j-1].value, Matrix[i][j].value, Matrix[i][j+1].value, Matrix[i][j-1].color, Matrix[i][j].color, Matrix[i][j+1].color)!= -1)
               {
                Available_Combinations_size++;
                available_line++;
                Available_Combinations[available_line][1].value = Matrix[i][j-1].value; Available_Combinations[available_line][1].color = Matrix[i][j-1].color;
                Available_Combinations[available_line][2].value = Matrix[i][j].value; Available_Combinations[available_line][2].color = Matrix[i][j].color;
                Available_Combinations[available_line][3].value = Matrix[i][j+1].value; Available_Combinations[available_line][3].color = Matrix[i][j+1].color;
               }

          }
         if(scor_cards(Matrix[i][j].value, Matrix[i][j+1].value, Matrix[i][j+2].value, Matrix[i][j].color, Matrix[i][j+1].color, Matrix[i][j+2].color)!= -1) /// 4 verde 4 albastru 4 portocaliu
          {
              Matrix[i][j].card_points += scor_cards(Matrix[i][j].value, Matrix[i][j+1].value, Matrix[i][j+2].value, Matrix[i][j].color, Matrix[i][j+1].color, Matrix[i][j+2].color);

                if(scor_cards(Matrix[i][j].value, Matrix[i][j+1].value, Matrix[i][j+2].value, Matrix[i][j].color, Matrix[i][j+1].color, Matrix[i][j+2].color)!= -1)
               {
                Available_Combinations_size++;
                available_line++;
                Available_Combinations[available_line][1].value = Matrix[i][j].value; Available_Combinations[available_line][1].color = Matrix[i][j].color;
                Available_Combinations[available_line][2].value = Matrix[i][j+1].value; Available_Combinations[available_line][2].color = Matrix[i][j+1].color;
                Available_Combinations[available_line][3].value = Matrix[i][j+2].value; Available_Combinations[available_line][3].color = Matrix[i][j+2].color;
               }

          }

for(int i = line +2; i > line + 1; i--)
        for(int j = column - testing; j <= column +testing; ++j)
            for(int k = column-testing; k<= column+testing; k++){
               {
                   Matrix[line][column].card_points+=(scor_cards(Matrix[line][column].value, Matrix[i][j].value, Matrix[line+1][k].value, Matrix[line][column].color, Matrix[i][j].color, Matrix[line+1][k].color)!= -1)?scor_cards(Matrix[line][column].value, Matrix[i][j].value, Matrix[line+1][k].value, Matrix[line][column].color, Matrix[i][j].color, Matrix[line+1][k].color):0;

                if(scor_cards(Matrix[line][column].value, Matrix[i][j].value, Matrix[line+1][k].value, Matrix[line][column].color, Matrix[i][j].color, Matrix[line+1][k].color)!= -1)
               {
                Available_Combinations_size++;
                available_line++;
                Available_Combinations[available_line][1].value = Matrix[line][column].value; Available_Combinations[available_line][1].color = Matrix[line][column].color;
                Available_Combinations[available_line][2].value = Matrix[i][j].value; Available_Combinations[available_line][2].color = Matrix[i][j].color;
                Available_Combinations[available_line][3].value = Matrix[line+1][k].value; Available_Combinations[available_line][3].color = Matrix[line+1][k].color;
               }
               }


/**if(scor_cards(Matrix[line][column].value, Matrix[i][j].value, Matrix[line+1][k].value, Matrix[line][column].color, Matrix[i][j].color, Matrix[line+1][k].color)== -1 and line == 11 and column == 11)
                    cout<<Matrix[line][column].value<<Matrix[line][column].color<<" "<<Matrix[i][j].value<<Matrix[i][j].color<<" "<<Matrix[line+1][k].value<<Matrix[line+1][k].color<<endl;*/
            }
}


void evaluate_and_set_Matrix_Points()
{
int i, j;
Available_Combinations_size = 0, available_line = 0;;
for(i = 1; i<=500; i++)
    for(int j = 1; j<=4; j++)
        Available_Combinations[i][j].value = 0, Available_Combinations[i][j].color = "", Available_Combinations[i][j].scor = 0;


        for(int i = 1; i<=30; i++)
            for(int j = 1; j<=30; j++)
                Matrix[i][j].card_points = 0;


for(i = 11; i<=18; i++)
    for(j = 11; j<=13; j++)
  Calculate_Available_Points_For(i,j);

}

int get_column(string colour)
{
    if(colour == "yellow")
        return 11;
    if(colour == "red")
        return 12;
    if(colour == "blue")
        return 13;
    return -1;

}

void Discard(int line, int column)
{
    Matrix[line][column].state = -1;
}



void Input()
{
    int card;
    string card_color;


    int remaining_values = 0, used_cards = 0;
    for(int i = 11; i<=18; ++i)
        for(int j = 11; j<=13; ++j)
            if(Matrix[i][j].state == 0)
                remaining_values++;
            else if(Matrix[i][j].state == 1)
                    used_cards++;

    cout<<"(left cards:"<<remaining_values<<", used cards: "<<used_cards<<"): "<<endl<<endl;
    if(remaining_values>0 and 5-used_cards > 0)
    {
        cout<<"Please introduce "<<5-used_cards<<" more cards: ";
        for(int i = 1; i<=5-used_cards and remaining_values!=0; ++i)
        {
            cin>>card>>card_color;

            if(card >0 and card<9 and card_color == "yellow" or card_color == "blue" or card_color == "red")
                if(Matrix[10+card][get_column(card_color)].state !=-1 and Matrix[10+card][get_column(card_color)].state !=1)
                Matrix[10+card][get_column(card_color)].state = 1, remaining_values--;
                else i--;

        }
    }

}

void evaluate_Table_Points(bool choice)
{

    transfer_card_points();

    int yellow[10],
        red[10],
        blue[10];
    yellow[0] = red[0] = blue[0] = -100;
    counter = 0;
    sum_points = 0;
    table_points[10] = {0};
    table_points[0] = 99; /// ca sa nu fie 0 - 1 - 2 combinatie
    table_colors[0] = "pinki";


    for(int i = 11; i<=18; ++i)
        for(int j = 11; j<=13; ++j)
            if(Matrix[i][j].state == 1)
            {
                counter++;
                table_points[counter] = Matrix[i][j].value,
                table_colors[counter] = Matrix[i][j].color;
            }

    for(int i = 1; i<=counter-1; ++i)
        for(int j = i+1; j<=counter; ++j)
            if(table_points[i] >= table_points[j])
                swap(table_points[i], table_points[j]),
                swap(table_colors[i], table_colors[j]);

  /// for(int i = 1; i<=counter; ++i)
      /// cout<<table_points[i]<<" "<<table_colors[i]<<endl;


      int counter_yellow = 0, counter_red = 0, counter_blue = 0, chosed_yellow = 0, chosed_red = 0, chosed_blue = 0;
      bool ok_yellow = false , ok_red = false, ok_blue = false;





      for(int i = 1; i<= counter; i++)
      if(table_colors[i] == "yellow")
      {
        counter_yellow++;
        yellow[counter_yellow] = table_points[i];
      }
      else
            if(table_colors[i] == "red")
      {
        counter_red++;
        red[counter_red] = table_points[i];
      }
      else
            if(table_colors[i] == "blue")
      {
        counter_blue++;
        blue[counter_blue] = table_points[i];
      }
     /// Matrix[16][get_column("yellow")].state = -1;
        ///working
        ///yellow

       if(counter_yellow > 1)
        {   ///cout<<"yellow:"<<endl;
            for(int i = 1; i<counter_yellow; ++i)
            {

                if((yellow[i+1] - yellow[i] == 2 or yellow[i+1] - yellow[i] == 1) and yellow[i]+1<9 and yellow[i]+2<9 and scor_cards(yellow[i],yellow[i]+1,yellow[i]+2, "yellow", "yellow", "yellow")!=-1)
                  {
                  ///    cout<<"dam scor lui: "<<yellow[i]<<" "<<yellow[i]+1<<" "<<yellow[i]+2<<endl;

                    if(yellow[i+1] - yellow[i] == 2){
                        if(yellow[i] <= 3){
                            Matrix[10+yellow[i]][get_column("yellow")].card_points = Matrice_val_initiala[10+yellow[i]+2][get_column("yellow")] + 10;
                                } /// normal acolada asta trebuie scoasa dar e lene

                            if(yellow[i+1]<=3)
                            Matrix[10+yellow[i+1]][get_column("yellow")].card_points = Matrice_val_initiala[10+yellow[i+1]+ 2][get_column("yellow")] + 10;

                        if(yellow[i] == 5)
                                Matrix[10+yellow[i]][get_column("yellow")].card_points += 100;

                        if(yellow[i+1] == 5)
                                Matrix[10+yellow[i+1]][get_column("yellow")].card_points += 100;



                    }


                    if(yellow[i+1] - yellow[i] == 1){
                        if(yellow[i] <= 3)
                        {
                            Matrix[10+yellow[i]][get_column("yellow")].card_points = Matrice_val_initiala[10+yellow[i]+ 2][get_column("yellow")] + 10;

                        }
                        if(yellow[i+1]<=3)
                            Matrix[10+yellow[i+1]][get_column("yellow")].card_points = Matrice_val_initiala[10+yellow[i+1]+ 2][get_column("yellow")] + 10;


                        if(yellow[i] == 5)
                                Matrix[10+yellow[i]][get_column("yellow")].card_points += 100;

                        if(yellow[i+1] == 5)
                                Matrix[10+yellow[i+1]][get_column("yellow")].card_points += 100;
                    }

                  }
                if(yellow[i] - (yellow[i]-1) == 1 and yellow[i+1] - yellow[i] == 1 and yellow[i]-1 > 0 and scor_cards(yellow[i]-1,yellow[i],yellow[i]+1, "yellow", "yellow", "yellow")!=-1)
                  {
                       /// cout<<"dam scor lui: "<<yellow[i]-1<<" "<<yellow[i]<<" "<<yellow[i]+1<<endl;

                        if(yellow[i] - yellow[i-1] == 2)
                        {
                        if(yellow[i] <= 3)
                        {

                            Matrix[10+yellow[i]][get_column("yellow")].card_points = Matrice_val_initiala[10+yellow[i]+ 2][get_column("yellow")]+ 10;

                        }
                            if(yellow[i-1]<=3)
                            Matrix[10+yellow[i-1]][get_column("yellow")].card_points = Matrice_val_initiala[10+yellow[i-1]+ 2][get_column("yellow")]+ 10;


                        if(yellow[i] == 5)
                                Matrix[10+yellow[i]][get_column("yellow")].card_points += 100;

                        if(yellow[i-1] == 5)
                                Matrix[10+yellow[i-1]][get_column("yellow")].card_points += 100;

                        }
                        if(yellow[i] - yellow[i-1]-1 == 1)
                        {
                            /// goood
                        if(yellow[i] <= 3)
                        {
                            Matrix[10+yellow[i]][get_column("yellow")].card_points = Matrice_val_initiala[10+yellow[i]+ 2][get_column("yellow")]+ 10;

                        }
                        if(yellow[i-1]-1 <=3)
                            Matrix[10+yellow[i-1]-1][get_column("yellow")].card_points = Matrice_val_initiala[10+yellow[i-1]+ 2 - 1][get_column("yellow")] + 10;



                        if(yellow[i] == 5)
                            Matrix[10+yellow[i]][get_column("yellow")].card_points += 100;

                        if(yellow[i-1]-1 == 5)
                            Matrix[10+yellow[i-1]-1][get_column("yellow")].card_points += 100;



                        }



                  }
            }

        }




/// red

       if(counter_red > 1)
        {   ///cout<<"red:"<<endl;
            for(int i = 1; i<counter_red; ++i)
            {

                if((red[i+1] - red[i] == 2 or red[i+1] - red[i] == 1) and red[i]+1<9 and red[i]+2<9 and scor_cards(red[i],red[i]+1,red[i]+2, "red", "red", "red")!=-1)
                  {
                  ///    cout<<"dam scor lui: "<<red[i]<<" "<<red[i]+1<<" "<<red[i]+2<<endl;

                    if(red[i+1] - red[i] == 2){
                        if(red[i] <= 3){
                            Matrix[10+red[i]][get_column("red")].card_points = Matrice_val_initiala[10+red[i]+2][get_column("red")] + 10;
                                } /// normal acolada asta trebuie scoasa dar e lene

                            if(red[i+1]<=3)
                            Matrix[10+red[i+1]][get_column("red")].card_points = Matrice_val_initiala[10+red[i+1]+ 2][get_column("red")] + 10;

                        if(red[i] == 5)
                                Matrix[10+red[i]][get_column("red")].card_points += 100;

                        if(red[i+1] == 5)
                                Matrix[10+red[i+1]][get_column("red")].card_points += 100;



                    }


                    if(red[i+1] - red[i] == 1){
                        if(red[i] <= 3)
                        {
                            Matrix[10+red[i]][get_column("red")].card_points = Matrice_val_initiala[10+red[i]+ 2][get_column("red")] + 10;

                        }
                        if(red[i+1]<=3)
                            Matrix[10+red[i+1]][get_column("red")].card_points = Matrice_val_initiala[10+red[i+1]+ 2][get_column("red")] + 10;


                        if(red[i] == 5)
                                Matrix[10+red[i]][get_column("red")].card_points += 100;

                        if(red[i+1] == 5)
                                Matrix[10+red[i+1]][get_column("red")].card_points += 100;
                    }

                  }
                if(red[i] - (red[i]-1) == 1 and red[i+1] - red[i] == 1 and red[i]-1 > 0 and scor_cards(red[i]-1,red[i],red[i]+1, "red", "red", "red")!=-1)
                  {
                       /// cout<<"dam scor lui: "<<red[i]-1<<" "<<red[i]<<" "<<red[i]+1<<endl;

                        if(red[i] - red[i-1] == 2)
                        {
                        if(red[i] <= 3)
                        {

                            Matrix[10+red[i]][get_column("red")].card_points = Matrice_val_initiala[10+red[i]+ 2][get_column("red")]+ 10;

                        }
                            if(red[i-1]<=3)
                            Matrix[10+red[i-1]][get_column("red")].card_points = Matrice_val_initiala[10+red[i-1]+ 2][get_column("red")]+ 10;


                        if(red[i] == 5)
                                Matrix[10+red[i]][get_column("red")].card_points += 100;

                        if(red[i-1] == 5)
                                Matrix[10+red[i-1]][get_column("red")].card_points += 100;

                        }
                        if(red[i] - red[i-1]-1 == 1)
                        {
                            /// goood
                        if(red[i] <= 3)
                        {
                            Matrix[10+red[i]][get_column("red")].card_points = Matrice_val_initiala[10+red[i]+ 2][get_column("red")]+ 10;

                        }
                        if(red[i-1]-1 <=3)
                            Matrix[10+red[i-1]-1][get_column("red")].card_points = Matrice_val_initiala[10+red[i-1]+ 2 - 1][get_column("red")] + 10;



                        if(red[i] == 5)
                            Matrix[10+red[i]][get_column("red")].card_points += 100;

                        if(red[i-1]-1 == 5)
                            Matrix[10+red[i-1]-1][get_column("red")].card_points += 100;



                        }



                  }
            }

        }


/// blue
       if(counter_blue > 1)
        {   ///cout<<"blue:"<<endl;
            for(int i = 1; i<counter_blue; ++i)
            {

                if((blue[i+1] - blue[i] == 2 or blue[i+1] - blue[i] == 1) and blue[i]+1<9 and blue[i]+2<9 and scor_cards(blue[i],blue[i]+1,blue[i]+2, "blue", "blue", "blue")!=-1)
                  {
                  ///    cout<<"dam scor lui: "<<blue[i]<<" "<<blue[i]+1<<" "<<blue[i]+2<<endl;

                    if(blue[i+1] - blue[i] == 2){
                        if(blue[i] <= 3){
                            Matrix[10+blue[i]][get_column("blue")].card_points = Matrice_val_initiala[10+blue[i]+2][get_column("blue")] + 10;
                                } /// normal acolada asta trebuie scoasa dar e lene

                            if(blue[i+1]<=3)
                            Matrix[10+blue[i+1]][get_column("blue")].card_points = Matrice_val_initiala[10+blue[i+1]+ 2][get_column("blue")] + 10;

                        if(blue[i] == 5)
                                Matrix[10+blue[i]][get_column("blue")].card_points += 100;

                        if(blue[i+1] == 5)
                                Matrix[10+blue[i+1]][get_column("blue")].card_points += 100;



                    }


                    if(blue[i+1] - blue[i] == 1){
                        if(blue[i] <= 3)
                        {
                            Matrix[10+blue[i]][get_column("blue")].card_points = Matrice_val_initiala[10+blue[i]+ 2][get_column("blue")] + 10;

                        }
                        if(blue[i+1]<=3)
                            Matrix[10+blue[i+1]][get_column("blue")].card_points = Matrice_val_initiala[10+blue[i+1]+ 2][get_column("blue")] + 10;


                        if(blue[i] == 5)
                                Matrix[10+blue[i]][get_column("blue")].card_points += 100;

                        if(blue[i+1] == 5)
                                Matrix[10+blue[i+1]][get_column("blue")].card_points += 100;
                    }

                  }
                if(blue[i] - (blue[i]-1) == 1 and blue[i+1] - blue[i] == 1 and blue[i]-1 > 0 and scor_cards(blue[i]-1,blue[i],blue[i]+1, "blue", "blue", "blue")!=-1)
                  {
                       /// cout<<"dam scor lui: "<<blue[i]-1<<" "<<blue[i]<<" "<<blue[i]+1<<endl;

                        if(blue[i] - blue[i-1] == 2)
                        {
                        if(blue[i] <= 3)
                        {

                            Matrix[10+blue[i]][get_column("blue")].card_points = Matrice_val_initiala[10+blue[i]+ 2][get_column("blue")]+ 10;

                        }
                            if(blue[i-1]<=3)
                            Matrix[10+blue[i-1]][get_column("blue")].card_points = Matrice_val_initiala[10+blue[i-1]+ 2][get_column("blue")]+ 10;


                        if(blue[i] == 5)
                                Matrix[10+blue[i]][get_column("blue")].card_points += 100;

                        if(blue[i-1] == 5)
                                Matrix[10+blue[i-1]][get_column("blue")].card_points += 100;

                        }
                        if(blue[i] - blue[i-1]-1 == 1)
                        {
                            /// goood
                        if(blue[i] <= 3)
                        {
                            Matrix[10+blue[i]][get_column("blue")].card_points = Matrice_val_initiala[10+blue[i]+ 2][get_column("blue")]+ 10;

                        }
                        if(blue[i-1]-1 <=3)
                            Matrix[10+blue[i-1]-1][get_column("blue")].card_points = Matrice_val_initiala[10+blue[i-1]+ 2 - 1][get_column("blue")] + 10;



                        if(blue[i] == 5)
                            Matrix[10+blue[i]][get_column("blue")].card_points += 100;

                        if(blue[i-1]-1 == 5)
                            Matrix[10+blue[i-1]-1][get_column("blue")].card_points += 100;



                        }



                  }
            }

        }


        ///cout_Matrix("card_points");

      /**
      /// possible combinations

      /// yellow
      if(counter_yellow > 1)
      {

      for(int i = counter_yellow; i>=1 and ok_yellow == false; --i)
        if(yellow[i+1]-yellow[i] == 1 and yellow[i] - yellow[i-1] != 1)
        {
            if(Matrix[10+yellow[i]-1][get_column("yellow")].state!= -1)
            ok_yellow = true, chosed_yellow = yellow[i];
        }
    else
        if(yellow[i] - yellow[i-1] == 1 and yellow[i+1] - yellow[i]!=1)
         {

            if(Matrix[10+yellow[i]+1][get_column("yellow")].state!= -1)
            ok_yellow = true, chosed_yellow = yellow[i];
         }
      }

      ///red
    cout<<chosed_yellow;
            if(counter_red > 1)
      {

      for(int i = counter_red; i>=1 and ok_red == false; --i)
        if(red[i+1]-red[i] == 1 and red[i] - red[i-1] != 1)
        {
            if(Matrix[10+red[i]-1][get_column("red")].state!= -1)
            ok_red = true, chosed_red = red[i];
        }
    else
        if(red[i] - red[i-1] == 1 and red[i+1] - red[i]!=1)
         {

            if(Matrix[10+red[i]+1][get_column("red")].state!= -1)
            ok_red = true, chosed_red = red[i];
         }
      }


       ///blue
            if(counter_blue > 1)
      {

      for(int i = counter_blue; i>=1 and ok_blue == false; --i)
        if(blue[i+1]-blue[i] == 1 and blue[i] - blue[i-1] != 1)
        {
            if(Matrix[10+blue[i]-1][get_column("blue")].state!= -1)
            ok_blue = true, chosed_blue = blue[i];
        }
    else
        if(blue[i] - blue[i-1] == 1 and blue[i+1] - blue[i]!=1)
         {

            if(Matrix[10+blue[i]][get_column("blue")].state!= -1)
            ok_blue = true, chosed_blue = blue[i];
         }
      }


      cout<<"Possible best combination for yellow "<<chosed_yellow-1<<", "<<chosed_yellow<<", "<<chosed_yellow+1<<endl;
      cout<<"Possible best combination for red "<<chosed_red-1<<", "<<chosed_red<<", "<<chosed_red+1<<endl;
      cout<<"Possible best combination for blue "<<chosed_blue-1<<", "<<chosed_blue<<", "<<chosed_blue+1<<endl;
*/
    if(choice == true)
{

    for(int i = 1; i<= counter; ++i)
    {
        for(int j = 1; j<= counter; ++j)
            for(int k = 1; k<= counter; ++k)
                if(i!=j and i!=k and j!=k)
                if(scor_cards(table_points[i], table_points[j], table_points[k], table_colors[i], table_colors[j], table_colors[k])!=-1)
        {
            cout<<"For: "<<table_points[i]<<" "<<table_colors[i]<<" "<<table_points[j]<<" "<<table_colors[j]<<" "<<table_points[k]<<" "<<table_colors[k]<<" scor is: "<<scor_cards(table_points[i], table_points[j], table_points[k], table_colors[i], table_colors[j], table_colors[k])<<endl;
         ///   sum_points += scor_cards(table_points[i], table_points[j], table_points[k], table_colors[i], table_colors[j], table_colors[k]);

        }
///cout<<"total sum: "<<sum_points<<endl<<endl;
}




}

else
{
      for(int i = 1; i<= counter; ++i)
    {
        for(int j = 1; j<= counter; ++j)
            for(int k = 1; k<= counter; ++k)
                if(i!=j and i!=k and j!=k)
                if(scor_cards(table_points[i], table_points[j], table_points[k], table_colors[i], table_colors[j], table_colors[k])!=-1)
        {

            sum_points += scor_cards(table_points[i], table_points[j], table_points[k], table_colors[i], table_colors[j], table_colors[k]);

        }

}
}


}

void WhatToDiscard()
{
    int chosed = 0, minim = 99999, i;

    for(int i = 1; i<=5; i++)
    {

    if(table_points[i] == 8)
        {

        if(table_colors[i] == "yellow")
        if(Matrix[16][11].state!=-1 and Matrix[17][11].state!=-1)
            Matrix[18][11].card_points = 1600;
        if(table_colors[i] == "red")
        if(Matrix[16][12].state!=-1 and Matrix[17][12].state!=-1)
           Matrix[18][12].card_points = 1600;

        if(table_colors[i] == "blue")
        if(Matrix[16][13].state!=-1 and Matrix[17][13].state!=-1)
            Matrix[18][13].card_points = 1600;


        }

    if(table_points[i] == 7)
        {

        if(table_colors[i] == "yellow")
        if(Matrix[16][11].state!=-1 and Matrix[18][11].state!=-1)
            Matrix[17][11].card_points = 1550;
        if(table_colors[i] == "red")
        if(Matrix[16][12].state!=-1 and Matrix[18][12].state!=-1)
           Matrix[17][12].card_points = 1550;

        if(table_colors[i] == "blue")
        if(Matrix[16][13].state!=-1 and Matrix[18][13].state!=-1)
            Matrix[17][13].card_points = 1550;


        }
    }

    for(int i = 11; i<=18; i++){
        for(int j = 11; j<=13; j++)
            cout<<Matrix[i][j].card_points<<" ";cout<<endl;}


    for( i = 1; i<= 5; ++i)
        {
      ///  cout<<table_points[i];
        if(Matrix[10+table_points[i]][get_column(table_colors[i])].card_points < minim)
            minim = Matrix[10+table_points[i]][get_column(table_colors[i])].card_points, chosed = i;

        }
///cout<<"minim="<<minim<<endl;

Matrix[10+table_points[chosed]][get_column(table_colors[chosed])].state = -1;

cout<<"DISCARDED: "<<Matrix[10+table_points[chosed]][get_column(table_colors[chosed])].value<<" "<<Matrix[10+table_points[chosed]][get_column(table_colors[chosed])].color<<endl;



}


bool available_combinations_until_scor_is_reached(int scor)
{

  if(global_scor>=100)
  {

    ///cout<<Available_Combinations_size<<endl;
int check = 0;


    for(int i = 1; i<=Available_Combinations_size; i++)
        for(int j = 1; j<=2; j++)
            for(int k = j+1; k<=3; k++)
                if(Available_Combinations[i][j].value > Available_Combinations[i][k].value)
                    swap(Available_Combinations[i][j].value, Available_Combinations[i][k].value),
                    swap(Available_Combinations[i][j].color, Available_Combinations[i][k].color);


      for(int i = 1; i<=Available_Combinations_size-1; i++){
            bool ok = false;
        for(int j = i+1; j<=Available_Combinations_size; j++)
            if(Available_Combinations[i][1].value == Available_Combinations[j][1].value and Available_Combinations[i][2].value == Available_Combinations[j][2].value and Available_Combinations[i][3].value == Available_Combinations[j][3].value and Available_Combinations[i][1].color == Available_Combinations[j][1].color and Available_Combinations[i][2].color == Available_Combinations[j][2].color and Available_Combinations[i][3].color == Available_Combinations[j][3].color)
     {

         for(int p = i; p<Available_Combinations_size; p++)
            for(int k = 1; k<=3; k++)
            Available_Combinations[p][k].value = Available_Combinations[p+1][k].value,
            Available_Combinations[p][k].color = Available_Combinations[p+1][k].color;
            ok = true;

     }
     if(ok ==true){
     Available_Combinations_size --;
            i--;}
      }


///cout<<Available_Combinations_size<<endl;

for(int i = 1; i<=Available_Combinations_size; i++)
{
        Available_Combinations[i][4].scor = scor_cards(Available_Combinations[i][1].value, Available_Combinations[i][2].value, Available_Combinations[i][3].value, Available_Combinations[i][1].color, Available_Combinations[i][2].color, Available_Combinations[i][3].color);
}

     for(int i = 1; i<=Available_Combinations_size - 1; i++)
        for(int j = i+1; j<=Available_Combinations_size; j++)
                if(Available_Combinations[i][4].scor < Available_Combinations[j][4].scor)
                    swap(Available_Combinations[i][1].value, Available_Combinations[j][1].value),
                    swap(Available_Combinations[i][2].value, Available_Combinations[j][2].value),
                    swap(Available_Combinations[i][3].value, Available_Combinations[j][3].value),
                    swap(Available_Combinations[i][1].color, Available_Combinations[j][1].color),
                    swap(Available_Combinations[i][2].color, Available_Combinations[j][2].color),
                    swap(Available_Combinations[i][3].color, Available_Combinations[j][3].color),
                    swap(Available_Combinations[i][4].scor, Available_Combinations[j][4].scor);








 for(int a = 1; a<= 600; a++)
 {
     if(Available_Combinations[a][4].scor > 0)
     {
          for(int i = 1; i<=Available_Combinations_size; i++)
     {
            for(int j = 1; j<=3; j++)
          if(i!=a)
          {
            if(Available_Combinations[i][j].value == Available_Combinations[a][1].value and Available_Combinations[i][j].color == Available_Combinations[a][1].color)
                Available_Combinations[i][4].scor = -1;

            if(Available_Combinations[i][j].value == Available_Combinations[a][2].value and Available_Combinations[i][j].color == Available_Combinations[a][2].color)
                Available_Combinations[i][4].scor = -1;

            if(Available_Combinations[i][j].value == Available_Combinations[a][3].value and Available_Combinations[i][j].color == Available_Combinations[a][3].color)
                Available_Combinations[i][4].scor = -1;

     }
     }

 }
 }
 /*

 for(int i = 1; i<=Available_Combinations_size; i++){
        if(Available_Combinations[i][4].scor!=-1)
        {
   for(int j = 1; j<=3; j++)
       cout<<Available_Combinations[i][j].value<<" "<<Available_Combinations[i][j].color<<" ";

      cout<<" ; scor "<<Available_Combinations[i][4].scor;
         cout<<endl;
      }
 }
*/

   /// for(int i = 1; i<=Available_Combinations_size; i++)
       ///  cout<<Available_Combinations[i][1].value<<" "<<Available_Combinations[i][2].color<<" "<<Available_Combinations[i][2].value<<" "<<Available_Combinations[i][2].color<<" "<<Available_Combinations[i][3].value<<" "<<Available_Combinations[i][3].color<<" "<<Available_Combinations[i][4].scor<<endl;
bool found = false;
if(Available_Combinations[1][4].scor == -1)
{       found = false;
        for(int j = 2; j<=Available_Combinations_size and found == false; j++)
        if(Available_Combinations[j][4].scor > 0)
            {
                Available_Combinations[1][1].value = Available_Combinations[j][1].value;
                Available_Combinations[1][1].color = Available_Combinations[j][1].color;

                Available_Combinations[1][2].value = Available_Combinations[j][2].value;
                Available_Combinations[1][2].color = Available_Combinations[j][2].color;

                Available_Combinations[1][3].value = Available_Combinations[j][3].value;
                Available_Combinations[1][3].color = Available_Combinations[j][3].color;

                Available_Combinations[1][4].scor = Available_Combinations[j][4].scor;

                found = true;
                Available_Combinations[j][4].scor = - 1;
            }
}

if(Available_Combinations[2][4].scor == -1)
{       found = false;
        for(int j = 3; j<=Available_Combinations_size and found == false; j++)
        if(Available_Combinations[j][4].scor > 0)
            {
                Available_Combinations[2][1].value = Available_Combinations[j][1].value;
                Available_Combinations[2][1].color = Available_Combinations[j][1].color;

                Available_Combinations[2][2].value = Available_Combinations[j][2].value;
                Available_Combinations[2][2].color = Available_Combinations[j][2].color;

                Available_Combinations[2][3].value = Available_Combinations[j][3].value;
                Available_Combinations[2][3].color = Available_Combinations[j][3].color;

                Available_Combinations[2][4].scor = Available_Combinations[j][4].scor;

                found = true;
                Available_Combinations[j][4].scor = - 1;
            }
}

/**
 for(int i = 1; i<=Available_Combinations_size; i++){
        if(Available_Combinations[i][4].scor!=-1)
        {
   for(int j = 1; j<=3; j++)
       cout<<Available_Combinations[i][j].value<<" "<<Available_Combinations[i][j].color<<" ";

      cout<<" ; scor "<<Available_Combinations[i][4].scor;
         cout<<endl;
      }
 }
 */


///cout<<"-----------------------------------"<<endl;
///cout<<Available_Combinations[1][4].scor<<" ------ "<<Available_Combinations[2][4].scor<<endl;
/// cout<<Available_Combinations[1][1].value<<" "<<Available_Combinations[1][2].color<<" "<<Available_Combinations[1][2].value<<" "<<Available_Combinations[1][2].color<<" "<<Available_Combinations[1][3].value<<" "<<Available_Combinations[1][3].color<<endl;
///   cout<<Available_Combinations[2][1].value<<" "<<Available_Combinations[2][2].color<<" "<<Available_Combinations[2][2].value<<" "<<Available_Combinations[2][2].color<<" "<<Available_Combinations[2][3].value<<" "<<Available_Combinations[2][3].color<<endl;
/// cout<<"__________________________________"<<endl;

 ///cout<<endl<<endl<<endl;
///cout<<scor<<endl<<endl;
 if(Available_Combinations[1][4].scor + Available_Combinations[2][4].scor + global_scor>= 300)
 {
    cout<<"==================== Available_combinations:"<<endl;
     cout<<Available_Combinations[1][1].value<<" "<<Available_Combinations[1][1].color<<" "<<Available_Combinations[1][2].value<<" "<<Available_Combinations[1][2].color<<" "<<Available_Combinations[1][3].value<<" "<<Available_Combinations[1][3].color<<" "<<Available_Combinations[1][4].scor<<endl;
    cout<<Available_Combinations[2][1].value<<" "<<Available_Combinations[2][1].color<<" "<<Available_Combinations[2][2].value<<" "<<Available_Combinations[2][2].color<<" "<<Available_Combinations[2][3].value<<" "<<Available_Combinations[2][3].color<<" "<<Available_Combinations[2][4].scor<<endl;
    return true;



 }

  }
  return false;



}

void best_suite_for_current_input()
{
    best_suite[1].color = ""; best_suite[1].scor = 0;
    int suite_yellow[10], suite_red[10], suite_blue[10], size_yellow=0, size_red=0, size_blue=0;
    for(int i = 11; i<=18; i++)
        for(int j = 11; j<=13; j++)
            if(Matrix[i][j].state == 1)
    {
        if(Matrix[i][j].color == "yellow")
            size_yellow++, suite_yellow[size_yellow] = Matrix[i][j].value;

         if(Matrix[i][j].color == "red")
            size_red++, suite_red[size_red] = Matrix[i][j].value;

        if(Matrix[i][j].color == "blue")
            size_blue++, suite_blue[size_blue] = Matrix[i][j].value;

    }
    /// sort yellow
    for(int i = 1; i<size_yellow; ++i)
        for(int j = i+1; j<= size_yellow; ++j)
            if(suite_yellow[i] > suite_yellow[j])
                swap(suite_yellow[i], suite_yellow[j]);

     /// sort red
    for(int i = 1; i<size_red; ++i)
        for(int j = i+1; j<= size_red; ++j)
            if(suite_red[i] > suite_red[j])
                swap(suite_red[i], suite_red[j]);

     /// sort blue
    for(int i = 1; i<size_blue; ++i)
        for(int j = i+1; j<= size_blue; ++j)
            if(suite_blue[i] > suite_blue[j])
                swap(suite_blue[i], suite_blue[j]);

    int max_suite_yellow = 0, max_suite_red = 0, max_suite_blue = 0, yellow_numbers[4], red_numbers[4], blue_numbers[4];
    /// max suite_yellow
    for(int i = size_yellow; i>=1 and max_suite_yellow == 0; i--)
        if(scor_cards(suite_yellow[i], suite_yellow[i-1], suite_yellow[i-2], "yellow", "yellow", "yellow")!=-1)
        {
            max_suite_yellow = scor_cards(suite_yellow[i], suite_yellow[i-1], suite_yellow[i-2], "yellow", "yellow", "yellow");
            yellow_numbers[1] = suite_yellow[i-2];
            yellow_numbers[2] = suite_yellow[i-1];
            yellow_numbers[3] = suite_yellow[i];
        }

    /// max suite_red
    for(int i = size_red; i>=1 and max_suite_red == 0; i--)
        if(scor_cards(suite_red[i], suite_red[i-1], suite_red[i-2], "red", "red", "red")!=-1)
        {
            max_suite_red = scor_cards(suite_red[i], suite_red[i-1], suite_red[i-2], "red", "red", "red");
            red_numbers[1] = suite_red[i-2];
            red_numbers[2] = suite_red[i-1];
            red_numbers[3] = suite_red[i];
        }

     /// max suite_blue
    for(int i = size_blue; i>=1 and max_suite_blue == 0; i--)
        if(scor_cards(suite_blue[i], suite_blue[i-1], suite_blue[i-2], "blue", "blue", "blue")!=-1)
        {
            max_suite_blue = scor_cards(suite_blue[i], suite_blue[i-1], suite_blue[i-2], "blue", "blue", "blue");
            blue_numbers[1] = suite_blue[i-2];
            blue_numbers[2] = suite_blue[i-1];
            blue_numbers[3] = suite_blue[i];
        }
        ///max yellow
    if(max_suite_yellow>= max_suite_red and max_suite_yellow >=max_suite_blue){
      ///  cout<<yellow_numbers[1]<<" "<<yellow_numbers[2]<<" "<<yellow_numbers[3]<<" scor yellow:"<<max_suite_yellow<<endl;
     best_suite[1].scor = max_suite_yellow, best_suite[1].color = "yellow";
    }

    if(max_suite_red>= max_suite_yellow and max_suite_red >=max_suite_blue){
      ///  cout<<red_numbers[1]<<" "<<red_numbers[2]<<" "<<red_numbers[3]<<" scor red:"<<max_suite_red<<endl;
     best_suite[1].scor = max_suite_red, best_suite[1].color = "red";
    }

    if(max_suite_blue>= max_suite_yellow and max_suite_blue >=max_suite_red){
      ///  cout<<blue_numbers[1]<<" "<<blue_numbers[2]<<" "<<blue_numbers[3]<<" scor blue:"<<max_suite_blue<<endl;
     best_suite[1].scor = max_suite_blue, best_suite[1].color = "blue";
    }

}

bool terta_de_opt()
{
if (Matrix[18][11].state!=-1 and Matrix[18][12].state!=-1 and Matrix[18][13].state!=-1)
{
bool do_we_have_opt = false;
int list_terta[10] = {0}, count_list = 0;
for(int i = 11; i<=18; i++)
    for(int j = 11; j<=13; j++)
        if(Matrix[i][j].state == 1)
{
    count_list++;
    list_terta[count_list] = Matrix[i][j].value;

}

if(count_list >= 3)
{

for(int i = 1; i<count_list; i++)
    for(int j = i+1; j<=count_list; j++)
        if(list_terta[i]>list_terta[j])
            swap(list_terta[i],list_terta[j]);


if(list_terta[count_list] == 8 and list_terta[count_list-1] == 8 and list_terta[count_list-2] == 8)
    do_we_have_opt = true;



}

if(do_we_have_opt == true)
{
    bool available_suite = false;
    for(int i = 11; i<=12; i++)
            {
                /**
                /// for yellow
                if(Matrix[i][11].state!=-1 and Matrix[i+1][11].state!=-1 and Matrix[i+2][11].state!=-1)
                    available_suite = true;
                /// for red
                if(Matrix[i][12].state!=-1 and Matrix[i+1][12].state!=-1 and Matrix[i+2][12].state!=-1)
                    available_suite = true;
                /// for blue
                if(Matrix[i][13].state!=-1 and Matrix[i+1][13].state!=-1 and Matrix[i+2][13].state!=-1)
                    available_suite = true;
                    */
            available_suite = true;
            }

    if(available_suite == true)
        if(Matrix[15][11].state!=-1 and Matrix[15][12].state!=-1 and Matrix[15][13].state!=-1)
            return true;
        else
            if(Matrix[15][11].state==-1 and Matrix[15][12].state==-1 and Matrix[15][13].state==-1 and used_in_combination_Matrix[15][11].used == true and used_in_combination_Matrix[15][12].used == true and used_in_combination_Matrix[15][13].used == true)
            return true;
        else
        {
            int count_used = 0;
            int count_available = 0;
            if(used_in_combination_Matrix[15][11].used == true)
                count_used++;

            if(used_in_combination_Matrix[15][12].used == true)
                count_used++;

            if(used_in_combination_Matrix[15][13].used == true)
                count_used++;

            if(Matrix[15][11].state!=-1)
                count_available++;

            if(Matrix[15][12].state!=-1)
                count_available++;

            if(Matrix[15][13].state!=-1)
                count_available++;

            if(count_used >=1 and count_available >=2)
                return true;

            if(count_used >=2 and count_available >=1)
                return true;


        }

}
}
return false;

}

bool terta_de_unu()
{

if(Matrix[11][11].state!=-1 and Matrix[11][12].state!=-1 and Matrix[11][13].state!=-1 and Matrix[15][11].state!=-1 and Matrix[15][12].state!=-1 and Matrix[15][13].state!=-1 and Matrix[14][11].state!=-1 and Matrix[14][12].state!=-1 and Matrix[14][13].state!=-1)
{
    bool do_we_have_unu = false;
    int list_terta[10] = {0}, count_list = 0;
for(int i = 11; i<=18; i++)
    for(int j = 11; j<=13; j++)
        if(Matrix[i][j].state == 1)
{
    count_list++;
    list_terta[count_list] = Matrix[i][j].value;

}

if(count_list >= 3)
{

for(int i = 1; i<count_list; i++)
    for(int j = i+1; j<=count_list; j++)
        if(list_terta[i]>list_terta[j])
            swap(list_terta[i],list_terta[j]);



if(list_terta[1] == 1 and list_terta[2] == 1 and list_terta[3] == 1)
    return true;
}

}
return false;

}

void Analyze()
{

      bool terta_de_opt_case = false, suita_best = false, terta_de_unu_case = false, random_terta_group = false, case_between_six_and_eight = false;
      ///cout<<terta_de_opt();




         best_suite_for_current_input();

          if(best_suite[1].scor > 0 and available_combinations_until_scor_is_reached(300-global_scor) == false)
        {
         global_scor += best_suite[1].scor;
        int max_card = (best_suite[1].scor - 20)/10;
        cout<<"=======COMBINATION:  "<<max_card<<" "<<best_suite[1].color<<" "<<max_card-1<<" "<<best_suite[1].color<<" "<<max_card-2<<" "<<best_suite[1].color<<endl;

        used_in_combination_Matrix[10+max_card][get_column(best_suite[1].color)].used = true;
        used_in_combination_Matrix[10+max_card-1][get_column(best_suite[1].color)].used = true;
        used_in_combination_Matrix[10+max_card-2][get_column(best_suite[1].color)].used = true;


        Discard(10+max_card, get_column(best_suite[1].color));
        Discard(10+max_card-1, get_column(best_suite[1].color));
        Discard(10+max_card-2, get_column(best_suite[1].color));
        Sleep(3000);
        suita_best = true;
        }


      if(terta_de_unu() == true and suita_best == false and available_combinations_until_scor_is_reached(300-global_scor) == false)
      {
          global_scor += 20;
          cout<<"=======COMBINATION:  "<<"1"<<" "<<"yellow"<<" "<<"1"<<" "<<"red"<<" "<<"1"<<" "<<"blue"<<endl;

        used_in_combination_Matrix[11][get_column("yellow")].used = true;
        used_in_combination_Matrix[11][get_column("red")].used = true;
        used_in_combination_Matrix[11][get_column("blue")].used = true;

        Discard(11, get_column("yellow"));
        Discard(11, get_column("red"));
        Discard(11, get_column("blue"));
        Sleep(3000);
        terta_de_unu_case = true;

      }

      if(terta_de_opt() == true and terta_de_unu_case == false and suita_best == false and available_combinations_until_scor_is_reached(300-global_scor) == false)
      {
          global_scor += 90;
          cout<<"=======COMBINATION:  "<<"8"<<" "<<"yellow"<<" "<<"8"<<" "<<"red"<<" "<<"8"<<" "<<"blue"<<endl;

        used_in_combination_Matrix[18][get_column("yellow")].used = true;
        used_in_combination_Matrix[18][get_column("red")].used = true;
        used_in_combination_Matrix[18][get_column("blue")].used = true;

        Discard(18, get_column("yellow"));
        Discard(18, get_column("red"));
        Discard(18, get_column("blue"));
        Sleep(3000);
        terta_de_opt_case = true;

      }
      if(terta_de_opt_case == false and suita_best == false and terta_de_unu_case == false)
      {
          if(available_combinations_until_scor_is_reached(300-global_scor) == true)
          {


          for(int i = 1; i<=2; i++)
          if(Matrix[Available_Combinations[i][1].value+10][get_column(Available_Combinations[i][1].color)].state == 1 and Matrix[Available_Combinations[i][2].value+10][get_column(Available_Combinations[i][2].color)].state == 1 and Matrix[Available_Combinations[i][3].value+10][get_column(Available_Combinations[i][3].color)].state == 1)
          {
              global_scor+= Available_Combinations[i][4].scor;
              cout<<"=======COMBINATION:  "<<Available_Combinations[i][1].value<<" "<<Available_Combinations[i][1].color<<" "<<Available_Combinations[i][2].value<<" "<<Available_Combinations[i][2].color<<" "<<Available_Combinations[i][3].value<<" "<<Available_Combinations[i][1].color<<" "<<Available_Combinations[i][4].scor<<endl;
              Discard(Available_Combinations[i][1].value+10, get_column(Available_Combinations[i][1].color));
              Discard(Available_Combinations[i][2].value+10, get_column(Available_Combinations[i][2].color));
              Discard(Available_Combinations[i][3].value+10, get_column(Available_Combinations[i][3].color));

              used_in_combination_Matrix[Available_Combinations[i][1].value+10][get_column(Available_Combinations[i][1].color)].used = true;
              used_in_combination_Matrix[Available_Combinations[i][2].value+10][get_column(Available_Combinations[i][2].color)].used = true;
              used_in_combination_Matrix[Available_Combinations[i][3].value+10][get_column(Available_Combinations[i][3].color)].used = true;

              random_terta_group = true;
              Sleep(3000);
          }

          }
      }

               ///pentru cazul in care pe tabla ai carti doar intre 6 si 8
         if(terta_de_opt_case == false and suita_best == false and terta_de_unu_case == false and available_combinations_until_scor_is_reached(300-global_scor) == false)
         {

            int high_matrix[50][50];
            for(int i = 1; i<=50; i++)
                for(int j = 1; j<=50; j++)
                    high_matrix[i][j] = 0;

            for(int i = 16; i<=18; i++)
                for(int j = 11; j<=13; j++)
                    high_matrix[i][j] = Matrix[i][j].card_points;

            for(int i = 17; i<=18; i++)
                for(int j = 11; j<=13; j++)
                    if(Matrix[i][j].card_points!=1)
                        high_matrix[i][j] = 10000;

               ///pentru cazul in care pe tabla ai carti doar intre 6 si 8
               int big_numbers_list[10], big_counter_list = 0, min_sum_six = 10000, min_sum_seven = 10000, min_sum_eight = 10000;
         string big_color_list[10], color_min_six ="", color_min_seven ="", color_min_eight ="";

         case_between_six_and_eight = true;

         if(available_combinations_until_scor_is_reached(300-global_scor) == true)
            case_between_six_and_eight = false;

         for(int i = 11; i<=18; i++)
            for(int j = 11; j<=13; j++)
                if(Matrix[i][j].state == 1)
         {
                    big_counter_list++;

                    big_numbers_list[big_counter_list] = Matrix[i][j].value;
                    big_color_list[big_counter_list] = Matrix[i][j].color;

                    if(Matrix[i][j].value<6 or Matrix[i][j].value>8)
                        case_between_six_and_eight = false;
         }

         if(case_between_six_and_eight == true)
{
    bool triple_card = false, combination = false, is_discarded = false;
    int aparitions_six = 0, aparitions_seven = 0, aparitions_eight = 0; /// cazurile in care ai 3 de 6 sau 3 de 7 sau 3 de 8
    for(int i = 1; i<=big_counter_list; i++)
    {

        if(big_numbers_list[i] == 6)
            aparitions_six++;

        if(big_numbers_list[i] == 7)
            aparitions_seven++;

        if(big_numbers_list[i] == 8)
            aparitions_eight++;

    }

    if(aparitions_six>2 or aparitions_seven>2 or aparitions_eight>2)
    {
        triple_card = true;

        if(aparitions_six>2)
            if(Matrix[17][11].state!=-1 and Matrix[17][12].state!=-1 and Matrix[17][13].state!=-1 and Matrix[18][11].state!=-1 and Matrix[18][12].state!=-1 and Matrix[18][13].state!=-1)
        {
             combination = true;
        used_in_combination_Matrix[16][get_column("yellow")].used = true;
        used_in_combination_Matrix[16][get_column("red")].used = true;
        used_in_combination_Matrix[16][get_column("blue")].used = true;
        global_scor += 70;
        cout<<"=======COMBINATION:  "<<"6"<<" "<<"yellow"<<" "<<"6"<<" "<<"red"<<" "<<"6"<<" "<<"blue"<<endl;
        Discard(16, get_column("yellow"));
        Discard(16, get_column("red"));
        Discard(16, get_column("blue"));
        Sleep(3000);


        }
                if(aparitions_seven>2)
            if(Matrix[16][11].state!=-1 and Matrix[16][12].state!=-1 and Matrix[16][13].state!=-1 and Matrix[18][11].state!=-1 and Matrix[18][12].state!=-1 and Matrix[18][13].state!=-1)
        {
             combination = true;
        used_in_combination_Matrix[17][get_column("yellow")].used = true;
        used_in_combination_Matrix[17][get_column("red")].used = true;
        used_in_combination_Matrix[17][get_column("blue")].used = true;
        global_scor += 80;
        cout<<"=======COMBINATION:  "<<"7"<<" "<<"yellow"<<" "<<"7"<<" "<<"red"<<" "<<"7"<<" "<<"blue"<<endl;
        Discard(17, get_column("yellow"));
        Discard(17, get_column("red"));
        Discard(17, get_column("blue"));
        Sleep(3000);


        }

    if(combination == false)
    {
        bool special_case = false; /// for example 6 6 6 7 7, you have 3 six and 2 seven. In this case you need to discard the lowest card point
        if(aparitions_six == 3 and aparitions_seven == 2)
        special_case = true;

        if(aparitions_six == 3 and aparitions_eight == 2)
        special_case = true;

        if(aparitions_seven == 3 and aparitions_six == 2)
        special_case = true;

        if(aparitions_seven == 3 and aparitions_eight == 2)
        special_case = true;

        if(special_case == true)
            {
            WhatToDiscard();
            Sleep(3000);
            is_discarded = true;
            }

    }


    }
    if(combination == false && is_discarded == false)
    {


             for(int i = 1; i<=big_counter_list; i++)
    {
                int temp_sum_yellow = 0, temp_sum_red = 0, temp_sum_blue = 0;
                /// sum for 6
                if(big_numbers_list[i] == 6)
             {
                 if(Matrix[big_numbers_list[i]+10][get_column(big_color_list[i])].card_points < min_sum_six)
                 {
                    min_sum_six = Matrix[big_numbers_list[i]+10][get_column(big_color_list[i])].card_points;
                    color_min_six = big_color_list[i];
                 }


             }
                /// sum for 7
                 if(big_numbers_list[i] == 7)
             {
                 if(Matrix[big_numbers_list[i]+10][get_column(big_color_list[i])].card_points < min_sum_seven)
                 {
                    min_sum_seven = Matrix[big_numbers_list[i]+10][get_column(big_color_list[i])].card_points;
                    color_min_seven = big_color_list[i];
                 }
                 else if(Matrix[big_numbers_list[i]+10][get_column(big_color_list[i])].card_points == min_sum_seven)
                 {  int min_yellow = 10000, min_red = 10000, min_blue = 10000;
                    if(Matrix[17][11].state == 1)
                        min_yellow = Matrix[16][11].card_points;

                    if(Matrix[17][12].state == 1)
                        min_red = Matrix[16][12].card_points;

                    if(Matrix[17][13].state == 1)
                        min_blue = Matrix[16][13].card_points;

                    if(min_yellow <= min_red and min_yellow <= min_blue)
                    color_min_seven = "yellow";
                    else if(min_red <= min_yellow and min_red <= min_blue)
                    color_min_seven = "red";
                    else if(min_blue <= min_yellow and min_blue <=min_red)
                    color_min_seven = "blue";

                 }
             }
                /// sum for 8
                 if(big_numbers_list[i] == 8)
             {
                 if(Matrix[big_numbers_list[i]+10][get_column(big_color_list[i])].card_points < min_sum_eight)
                 {
                    min_sum_eight = Matrix[big_numbers_list[i]+10][get_column(big_color_list[i])].card_points;
                    color_min_eight = big_color_list[i];
                 }
                else if(Matrix[big_numbers_list[i]+10][get_column(big_color_list[i])].card_points == min_sum_seven)
                 {

                    int min_yellow = 10000, min_red = 10000, min_blue = 10000;
                    if(Matrix[18][11].state == 1)
                        min_yellow = Matrix[16][11].card_points + Matrix[17][11].card_points;

                    if(Matrix[18][12].state == 1)
                        min_red = Matrix[16][12].card_points + Matrix[17][12].card_points;

                    if(Matrix[18][13].state == 1)
                        min_blue = Matrix[16][13].card_points + Matrix[17][13].card_points;

                    if(min_yellow <= min_red and min_yellow <= min_blue)
                    color_min_eight = "yellow";
                    else if(min_red <= min_yellow and min_red <= min_blue)
                    color_min_eight = "red";
                    else if(min_blue <= min_yellow and min_blue <=min_red)
                    color_min_eight = "blue";
                 }
             }
    }

        used_in_combination_Matrix[16][get_column(color_min_six)].used = true;
        used_in_combination_Matrix[17][get_column(color_min_seven)].used = true;
        used_in_combination_Matrix[18][get_column(color_min_eight)].used = true;
        global_scor += 60;
        cout<<"=======COMBINATION:  "<<"6"<<" "<<color_min_six<<" "<<"7"<<" "<<color_min_seven<<" "<<"8"<<" "<<color_min_eight<<endl;
        Discard(16, get_column(color_min_six));
        Discard(17, get_column(color_min_seven));
        Discard(18, get_column(color_min_eight));
        Sleep(3000);


}

         }
         }

        if(terta_de_opt_case == false and suita_best == false)
            if(terta_de_unu_case == false and random_terta_group == false and case_between_six_and_eight == false)
        {
                    WhatToDiscard();
                    Sleep(3000);
        }
        else cout<<"terta de opt "<<terta_de_opt_case<<endl<<"suita_best "<<" "<<suita_best<<endl<<"terta de unu "<<terta_de_unu_case<<endl;


}

void transfer_card_points()
{
    for(int i = 1; i<=30; i++)
        for(int j = 1; j<=30; j++)
            Matrice_val_initiala[i][j] = Matrix[i][j].card_points;



}

